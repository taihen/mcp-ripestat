name: CI/CD
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
permissions:
  contents: write
  packages: write
  pull-requests: write
  security-events: write
env:
  GO_VERSION: '1.24'
  BINARY_NAME: 'mcp-ripestat'
jobs:
  check-commit:
    name: Check Commit Type
    runs-on: ubuntu-latest
    outputs:
      is-chore: ${{ steps.check.outputs.is-chore }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check if commit is chore
        id: check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:'%s')
          echo "Commit message: $COMMIT_MSG"
          if [[ "$COMMIT_MSG" =~ ^chore(\(.*\))?!?:.* ]]; then
            echo "is-chore=true" >> "$GITHUB_OUTPUT"
            echo "ðŸ”§ Detected chore commit - will skip build/test/release"
          else
            echo "is-chore=false" >> "$GITHUB_OUTPUT"
            echo "âœ… Regular commit - will run full pipeline"
          fi
  lint:
    name: Linting
    runs-on: ubuntu-latest
    needs: [check-commit]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Super-Linter
        uses: super-linter/super-linter@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_MARKDOWN: true
          VALIDATE_YAML: true
          VALIDATE_JSON: true
          VALIDATE_EDITORCONFIG: true
          VALIDATE_BASH: true
          VALIDATE_DOCKERFILE: true
          VALIDATE_GITHUB_ACTIONS: true
          VALIDATE_GITATTRIBUTES: true
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1
          skip-cache: true
      - name: Run govulncheck
        uses: golang/govulncheck-action@v1
        with:
          repo-checkout: false
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: /language:go
  test:
    name: Testing
    runs-on: ubuntu-latest
    needs: [check-commit, lint]
    if: needs.check-commit.outputs.is-chore != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run tests
        run: make test
      - name: Check coverage threshold
        run: make check-coverage
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [check-commit, test]
    if: needs.check-commit.outputs.is-chore != 'true'
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build binaries
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: make build-cross
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ env.BINARY_NAME }}-*
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [check-commit, build]
    if: needs.check-commit.outputs.is-chore != 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          branch: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.semantic.outputs.new_release_version }}
          tags: |
            ghcr.io/taihen/${{ env.BINARY_NAME }}:latest
            ghcr.io/taihen/${{ env.BINARY_NAME }}:${{ steps.semantic.outputs.new_release_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Update release with Docker info
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          RELEASE_TAG="v${{ steps.semantic.outputs.new_release_version }}"
          RELEASE_BODY=$(gh release view "$RELEASE_TAG" --json body --jq '.body')
          NEW_BODY="${RELEASE_BODY}

          ## Docker Images
          Pull the Docker image:
          \`\`\`bash
          docker pull ghcr.io/taihen/${{ env.BINARY_NAME }}:${{ steps.semantic.outputs.new_release_version }}
          docker pull ghcr.io/taihen/${{ env.BINARY_NAME }}:latest
          \`\`\`"
          gh release edit "$RELEASE_TAG" --notes "$NEW_BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  security-monitoring:
    name: Security & Performance Monitoring
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [release]
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run OSSF Scorecard
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: Upload OSSF Scorecard results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
