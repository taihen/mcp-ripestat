name: CI/CD
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
permissions:
  contents: write
  packages: write
  pull-requests: write
  security-events: write
jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Super-Linter
        uses: super-linter/super-linter@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_MARKDOWN: true
          VALIDATE_YAML: true
          VALIDATE_JSON: true
          VALIDATE_EDITORCONFIG: true
          VALIDATE_BASH: true
          VALIDATE_DOCKERFILE: true
          VALIDATE_GITHUB_ACTIONS: true
          VALIDATE_GITATTRIBUTES: true
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1
          skip-cache: true
      - name: Run govulncheck
        uses: golang/govulncheck-action@v1
        with:
          repo-checkout: false
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: /language:go
  test:
    name: Testing
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Install dependencies
        run: go mod download
      - name: Run tests with coverage
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      - name: Generate coverage report
        run: go tool cover -html=coverage.txt -o coverage.html
      - name: Check coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.txt | grep total | \
          awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "Error: Test coverage is below 90%"
            exit 1
          fi
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.txt
          fail_ci_if_error: false
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Build binaries
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          BINARY_NAME="mcp-ripestat-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          go build -v -ldflags="-s -w" -o "${BINARY_NAME}" ./cmd/mcp-ripestat
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mcp-ripestat-${{ matrix.goos }}-${{ matrix.goarch }}
          path: mcp-ripestat-*
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: mcp-ripestat:latest
          platforms: linux/amd64,linux/arm64
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          branch: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload release assets
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.semantic.outputs.new_release_version }}
          files: |
            mcp-ripestat-*
          body: |
            ## Docker Images
            Pull the Docker image:
            ```bash
            docker pull ghcr.io/taihen/mcp-ripestat:${{ steps.semantic.outputs.new_release_version }}
            # or latest
            docker pull ghcr.io/taihen/mcp-ripestat:latest
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Log in to GitHub Container Registry
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |-
            ghcr.io/taihen/mcp-ripestat:latest
            ghcr.io/taihen/mcp-ripestat:${{ steps.semantic.outputs.new_release_version }}
